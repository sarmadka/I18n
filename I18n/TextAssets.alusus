@merge module I18n {
    use Core.Basic;
    use Core.Data;
    def AstTemplateMap: alias Map[String, ref[TiObject]];

    class TextAssets [
        path: string,
        defaultLangCode: string,
        DataType: type = Srl.String,
        varInitializer: function = generateTextAssetsEmbeddedVarInitialization
    ] {
        def Instance: alias TextAssetsInstance[path, defaultLangCode, DataType];

        def instances: Map[String, SrdRef[Instance]];
        def current: SrdRef[Instance];
        def currentLanguage: String;

        handler this~init() {}

        handler this.initialize() {
            // Populate the map for all available locales.
            preprocess {
                def dirs: ptr[Fs.FileNames] = Fs.readDir(path);
                def i: Int;
                for i = 0, i < dirs~cnt.count, ++i {
                    if dirs~cnt.names(i)(0) == '.' continue; // Skip . and .. and hidden files.

                    def initializations: SrdRef[Ast.List] = newSrdObj[Ast.List];
                    def initializationsContainer: DynContainerOf[initializations.obj];
                    def filenames: ptr[Fs.FileNames] = Fs.readDir(String(path) + "/" + dirs~cnt.names(i)~ptr);
                    def j: Int;
                    for j = 0, j < filenames~cnt.count, ++j {
                        def filename: String = String(1, filenames~cnt.names(j)~ptr);
                        if filename(0) == '.' continue; // Skip . and .. and hidden files.
                        def dir: String = String(1, dirs~cnt.names(i)~ptr);
                        def varName: String = filename.split(".")(0);
                        initializationsContainer.addElement(varInitializer(varName, String(1, path), dir, filename));
                    }

                    Spp.astMgr.insertAst(
                        (ast this.instances.set(String(lang), SrdRef[Instance].construct().{
                            initializations
                        })),
                        AstTemplateMap()
                            .set(String("lang"), Core.Basic.TiStr(String(dirs~cnt.names(i)~ptr)))
                            .set(String("initializations"), initializations)
                    );
                }
            }

            this.setCurrentLanguage(String(defaultLangCode));
        }

        handler this.getAvailableLanguages(): Array[String] {
            def langs: Array[String] = this.instances.keys;
            // Bring the default language to the front.
            def i: Int;
            for i = 0, i < langs.getLength(), ++i {
                if langs(i) == defaultLangCode {
                    langs.remove(i);
                    langs.insert(0, String(defaultLangCode));
                    break;
                }
            }
            return langs;
        }

        handler this.setCurrentLanguage(langCode: String) {
            if this.instances(langCode).isNull() langCode = defaultLangCode;
            this.current = this.instances(langCode);
            this.currentLanguage = langCode;
        }
    }

    class TextAssetsInstance [path: string, defaultLangCode: string, DataType: type = Srl.String] {
        handler this~init() {}

        // Define member variables.
        preprocess {
            def filenames: ptr[Fs.FileNames] = Fs.readDir(String(path) + "/" + defaultLangCode);
            def i: Int;
            for i = 0, i < filenames~cnt.count, ++i {
                if filenames~cnt.names(i)(0) == '.' continue; // Skip . and .. and hidden files.
                def name: String = String(filenames~cnt.names(i)~ptr).split(".")(0);
                Spp.astMgr.insertAst(
                    (ast def name: DataType),
                    AstTemplateMap().set(String("name"), Core.Basic.TiStr(name))
                );
            }
        }
    }

    func generateTextAssetsEmbeddedVarInitialization(
        varName: String, path: String, dir: String, filename: String
    ): SrdRef[TiObject] {
        def content: String = Fs.readFile(path + "/" + dir + "/" + filename);
        return Spp.astMgr.buildAst(
            (ast varName = String(1, varData)),
            AstTemplateMap()
                .set(String("varName"), Ast.Identifier(varName))
                .set(String("varData"), Ast.StringLiteral(content))
        );
    }
}
